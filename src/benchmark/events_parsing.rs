use std::time::Instant;

use anyhow::Result;

use crate::{core::events::bpf::parse_raw_event, module::get_modules};

/// Benchmark time to parse a bunch of raw events.
pub(super) fn bench(ci: bool) -> Result<()> {
    let iters = match ci {
        false => 1000000,
        true => 1,
    };

    let modules = get_modules()?;
    let mut factories = modules.section_factories()?;

    // 63929224580 [retis] 1420/1425 [tp] openvswitch:ovs_dp_upcall #ee27a0a74ffff8d2942c05000 (skb 18446617807134872832)
    //   ns 4026531840 if 8 (ovs-br0) rxif 2 5e:bd:30:1f:0c:c9 > ee:34:59:7f:f5:41 ethertype IPv4 (0x0800) 1.1.1.1.443 > 10.0.42.2.42906 ttl 55 tos 0x0 id 21341 off 0 [DF] len 52 proto TCP (6) flags [F.] seq 1784086896 ack 2729891395 win 8 skb [hash 0xb1122e3e len 66 priority 0 users 1 dataref 1]
    //   upcall (miss) port 4035366913 cpu 0
    //   ct_state REPLY tcp (LAST_ACK) orig [10.0.42.2.42906 > 1.1.1.1.443] reply [1.1.1.1.443 > 172.16.42.90.42906] zone 0
    let data = [
        131, 1, 1, 0, 8, 0, 6, 186, 122, 226, 14, 0, 0, 0, 1, 1, 72, 0, 145, 5, 0, 0, 140, 5, 0, 0,
        114, 101, 116, 105, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 1, 17, 0, 192, 80, 162, 192, 255, 255, 255, 255, 1, 255, 255, 255,
        255, 255, 255, 255, 255, 8, 1, 32, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 208, 134, 240, 0, 0, 0, 0,
        132, 141, 122, 226, 14, 0, 0, 0, 0, 0, 0, 0, 163, 7, 236, 37, 7, 7, 24, 0, 111, 118, 115,
        45, 98, 114, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 7, 8, 4, 0, 0, 0, 0,
        240, 7, 9, 20, 0, 66, 0, 0, 0, 0, 0, 0, 0, 62, 46, 18, 177, 0, 0, 0, 0, 0, 0, 0, 0, 7, 10,
        5, 0, 0, 0, 0, 1, 1, 7, 0, 14, 0, 94, 189, 48, 31, 12, 201, 238, 52, 89, 127, 245, 65, 8,
        0, 7, 2, 19, 0, 1, 1, 1, 1, 10, 0, 42, 2, 0, 52, 83, 93, 6, 55, 0, 0, 0, 0, 2, 7, 4, 16, 0,
        1, 187, 167, 154, 106, 87, 1, 112, 162, 182, 214, 67, 0, 8, 17, 8, 5, 1, 24, 0, 0, 80, 192,
        66, 41, 141, 255, 255, 116, 10, 122, 226, 14, 0, 0, 0, 0, 85, 171, 69, 41, 141, 255, 255,
        10, 0, 80, 0, 23, 0, 0, 0, 0, 0, 10, 0, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
        154, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 187, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 187, 172, 16, 42, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 154, 3,
        6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 64,
        217, 1, 0, 0, 109, 0, 1, 0, 8, 0, 247, 47, 103, 221, 14, 0, 0, 0, 1, 1, 72, 0, 73, 5, 0, 0,
        73, 5, 0, 0, 115, 115, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 17, 0, 64, 195, 243, 137, 255, 255, 255, 255, 2,
        255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];

    // Parse one first as some factories have on-demand
    // initialization steps.
    let now = Instant::now();
    parse_raw_event(&data, &mut factories)?;
    println!("first_raw_event_parsing_us {}", now.elapsed().as_micros());

    let now = Instant::now();
    for _ in 0..iters {
        parse_raw_event(&data, &mut factories)?;
    }
    println!("1M_raw_events_parsing_us {}", now.elapsed().as_micros());

    Ok(())
}
