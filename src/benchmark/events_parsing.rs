use std::time::Instant;

use anyhow::Result;

use crate::{core::events::bpf::parse_raw_event, module::get_modules};

/// Benchmark time to parse a bunch of raw events.
pub(super) fn bench(ci: bool) -> Result<()> {
    let iters = match ci {
        false => 1000000,
        true => 1,
    };

    let modules = get_modules()?;
    let mut factories = modules.section_factories()?;

    // 500524027421 [retis] 1644/1648 [tp] openvswitch:ovs_dp_upcall #74898e4c76ffff953d06ba9000 (skb 18446626688081147648)
    //   ns 4026531840 if 16 (ovs-br0) rxif 2 fe:dc:78:a1:79:42 > b2:01:6e:57:50:f4 ethertype IPv4 (0x0800) 1.1.1.1.443 > 10.0.42.2.43778 ttl 55 tos 0x0 id 2508 off 0 [DF] len 52 proto TCP (6) flags [F.] seq 3930464037 ack 1714943057 win 8 skb [hash 0xb230116e len 66 priority 0 users 1 dataref 1]
    //   upcall (miss) port 4158868501 cpu 0
    //   ct_state REPLY tcp (LAST_ACK) orig [10.0.42.2.43778 > 1.1.1.1.443] reply [1.1.1.1.443 > 172.16.42.90.43778] zone 0
    let data = [
        81, 2, 1, 0, 8, 0, 217, 173, 142, 137, 116, 0, 0, 0, 1, 1, 72, 0, 112, 6, 0, 0, 108, 6, 0,
        0, 114, 101, 116, 105, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 17, 0, 192, 80, 162, 192, 255, 255, 255, 255, 1, 255, 255,
        255, 255, 255, 255, 255, 255, 8, 1, 32, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 76, 227, 247, 0, 0,
        0, 0, 29, 142, 142, 137, 116, 0, 0, 0, 0, 0, 0, 0, 87, 13, 55, 179, 10, 0, 80, 0, 23, 0, 0,
        0, 0, 0, 10, 0, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 2, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 187, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 187,
        172, 16, 42, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 2, 3, 6, 7, 1, 7, 1, 66, 0, 0, 0,
        66, 0, 0, 0, 178, 1, 110, 87, 80, 244, 254, 220, 120, 161, 121, 66, 8, 0, 69, 0, 0, 52, 9,
        204, 64, 0, 55, 6, 3, 245, 1, 1, 1, 1, 10, 0, 42, 2, 1, 187, 171, 2, 234, 70, 31, 37, 102,
        55, 244, 81, 128, 17, 0, 8, 206, 81, 0, 0, 1, 1, 8, 10, 96, 245, 94, 173, 118, 215, 43, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 24, 0, 111, 118, 115, 45, 98, 114, 48, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 7, 3, 4, 0, 0, 0, 0, 240, 7, 4, 20, 0, 66, 0, 0, 0, 0, 0,
        0, 0, 110, 17, 48, 178, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 5, 0, 0, 0, 0, 1, 1, 5, 1, 24, 0, 0,
        144, 186, 6, 61, 149, 255, 255, 118, 76, 142, 137, 116, 0, 0, 0, 0, 55, 81, 7, 61, 149,
        255, 255, 0, 0, 0, 0, 0, 0, 0, 2, 1, 17, 0, 112, 109, 171, 155, 255, 255, 255, 255, 0, 255,
        255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];

    // Parse one first as some factories have on-demand
    // initialization steps.
    let now = Instant::now();
    parse_raw_event(&data, &mut factories)?;
    println!("first_raw_event_parsing_us {}", now.elapsed().as_micros());

    let now = Instant::now();
    for _ in 0..iters {
        parse_raw_event(&data, &mut factories)?;
    }
    println!("1M_raw_events_parsing_us {}", now.elapsed().as_micros());

    Ok(())
}
